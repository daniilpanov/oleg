Массивы (Array) - это ряд чисел или знаков у которых есть имя и значение.  Массивом можно считать разновидность переменных, в котором храниться несколько значений.
Массив определяется при помощи конструкции array(), в круглых скобках которой указываются его значения. При этом она позволяет создавать пустые массивы.  

Пример:

	<?php
	$arr = array('PHP', 'MySQL', 'Apache'); //можно использовать как одинарные, так и двойные кавычки
	?>

	или
	
	<?php
	$arr[] = "PHP";
	$arr[] = "MySQL";
	$arr[] = "Apache";
	?>

В C-подобных языках программирования, индекс массива традиционно начинается с 0. Это означает, что если мы захотим вывести первое значение массива "PHP", нам потребуется обратиться к нулевому индексу:

	<?php
	echo $arr[0]; // PHP
	?>

Если требуется начать массив с другого индекса, например, с 1, то необходимо явно это указать в конструкции array():

	<?php
	$arr = array(
		 1 => "PHP", 
	            2 => "MySQL",
	            3 => "Apache");
	?>

	или
	
	<?php
	$arr[1] = "PHP";
	$arr[2] = "MySQL";
	$arr[3] = "Apache";
	?>


Существует два типа массивов, различающиеся по способу идентификации элементов.

	- Простые
	- Ассоциативные 

	1.  Простые. В массивах первого типа элемент определяется индексом в последовательности. Такие массивы называются простыми массивами.
При обращении к элементам простых индексируемых массивов используется целочисленный индекс, определяющий позицию заданного элемента.

Массивы, индексами которых являются числа, начинающиеся с нуля - это списки:

Пример:

массив $names можно сравнить со шкафом в котором в каждом ящике находяться определенные фрукты(значения). Каждый ящик имеет свой индекс (ключ), к которому можно обратиться.

$names
0	1	2	3
Апельсин	Банан	Груша	Помидор

	<?php
	// Простой способ инициализации массива
	$names[0]="Апельсин";
	$names[1]="Банан";
	$names[2]="Груша";
	$names[3]="Помидор";
	// Здесь: names - имя массива, а 0, 1, 2, 3 - индексы массива, Апельсин, Банан, Груша, Помидор - значения массива.
	?>

Доступ к элементам простых массивов (списков) осуществляется следующим образом:

	echo $names[0]; // Вывод элемента массива names с индексом 0 // Выводим элементы массивов в браузер
	echo $names[3]; // Вывод элемента массива names с индексом 3 // Апельсин, Помидор

С технической точки зрения разницы между простыми массивами и списками нет.
Простые массивы можно создавать, не указывая индекс нового элемента массива, это за вас сделает PHP.

Пример:

	<?php
	// Простой способ инициализации массива, без указания индексов
	$names[]="Апельсин";
	$names[]="Банан";
	$names[]="Груша";
	$names[]="Помидор";
	// PHP автоматически присвоит индексы элементам массива, начиная с 0
	
	// Выводим элементы массивов в браузер:
	echo $names[0]; // Вывод элемента массива names с индексом 0
	echo $names[3]; // Вывод элемента массива names с индексом 3 // Апельсин, Помидор
	?>

В рассмотренном примере вы можете добавлять элементы массива names простым способом, то есть не указывая индекс элемента массива:

Пример:

	$names[]="Яблоко";

Новый элемент простого массива (списка) будет добавлен в конец массива. В дальнейшем, с каждым новым элементом массива, индекс будет увеличиваться на единицу.

Массивы могут быть как одномерными, так и многомерными.


$arr
0	1	2
0	0	0
1	1	1
Овощи	2	2
Фрукты	Абрикос	Огурец
	Апельсин	Помидор
	Банан	Тыква

Синтаксис:

	$имя[индекс1][индекс2]..[индексN];
	
Пример:

	<?php
	// Многомерный простой массив:
	$arr[0][0]="Овощи";
	$arr[0][1]="Фрукты";
	$arr[1][0]="Абрикос";
	$arr[1][1]="Апельсин";
	$arr[1][2]="Банан";
	$arr[2][0]="Огурец";
	$arr[2][1]="Помидор";
	$arr[2][2]="Тыква";
	
	// Выводим элементы массива:
	echo $arr[2][1]; // Помидор
	echo $arr[0][1]; // Фрукты
	echo $arr[1][1]; // Апельсин
	?>

	
2. Ассоциативные. Массивы второго типа имеют ассоциативную природу, и для обращения к элементам используются ключи, логически связанные со значениями. Такие массивы называют ассоциативными массивами. Итак, массивы, индексами которых являются строки, называются ассоциативными массивами.

В PHP индексом массива может быть не только число, но и строка. Причем на такую строку не накладываются никакие ограничения: она может содержать пробелы, длина такой строки может быть любой.

Ассоциативные массивы особенно удобны в ситуациях, когда элементы массива удобнее связывать со словами, а не с числами. 

Одномерные ассоциативные массивы:
Одномерные ассоциативные массивы содержат только один ключ (элемент), соответствующий конкретному индексу ассоциативного массива.

$names
Иванов	Сидоров	Петров
Иван	Николай	Петр

Пример:

	<?php
	// Ассоциативный массив
	$names["Иванов"]="Иван";
	$names["Сидоров"]="Николай";
	$names["Петров"]="Петр";
	// В данном примере: фамилии - ключи ассоциативного массива
	// , а имена - элементы массива names
	?>

Доступ к элементам одномерных ассоциативных массивов осуществляется так же, как и к элементам обыкновенных массивов, и называется доступом по ключу:

Пример:

	echo $names["Иванов"];
	
Многомерные ассоциативныемассивы:
Многомерные ассоциативные массивы могут содержать несколько ключей, соответствующих конкретному индексу ассоциативного массива.

$peoples
Ivanov	Petrov	Sidorov
name	name	name
age	age	age
email	email	email
Иванов И.И	Петров П.П.	Сидоров С.С.
25	34	47
ivanov@mail.ru	petrov@mail.ru	sidorov@mail.ru

Пример:

	<?php
	// Многомерный ассоциативный массив
	$peoples["Ivanov"] = array("name"=>"Иванов И.И.", "age"=>"25", "email"=>"ivanov@mail.ru");
	$peoples["Petrov"] = array("name"=>"Петров П.П.", "age"=>"34", "email"=>"petrov@mail.ru");
	$peoples["Sidorov"] = array("name"=>"Сидоров С.С.", "age"=>"47", "email"=>"sidorov@mail.ru");
	?>
	
	или так:
	
	<?php
	// Многомерный ассоциативный массив
	$peoples["Ivanov"]["name"]="Иванов И.И.";
	$peoples["Ivanov"]["age"]="25";
	$peoples["Ivanov"]["email"]="ivanov@mail.ru";
	
	$peoples["Petrov"]["name"]="Петров П.П.";
	$peoples["Petrov"]["age"]="34";
	$peoples["Petrov"]["email"]="petrov@mail.ru";
	
	$peoples["Sidorov"]["name"]="Сидоров С.С.";
	$peoples["Sidorov"]["age"]="47";
	$peoples["Sidorov"]["email"]="sidorov@mail.ru";
	
	// Получаем доступ к ключам многомерного ассоциативного массива
	echo $peoples["Ivanov"]["name"]."<br>"; // Выводит Иванов И.И.
	echo$peoples["Sidorov"]["age"]."<br>"; // Выводит 47
	echo $peoples["Petrov"]["email"]."<br>"; // Выводит petrov@mail.ru
	?>


Пример:

	<?php
	echo "$arr[1] $arr[2] $arr[3]";
	?>
	
	или через цикл:
	
	<?php
	for ($i = 1; $i <= 3; $i++)
	{
		echo $arr[$i]." ";
	}
	?> 
	
Следует заметить, что число элементов в массиве не обязательно знать заранее — его можно вычислить при помощи функции count():

Пример:

	<?php
	for ($i = 1; $i <= count($arr); $i++)
	{
		echo $arr[$i]." ";
	}
	?> 
	
Пример:

	<?php
	$arr = array(); // Создает пустой массив
	
	$arr2 = array("Иванов","Петров","Сидоров"); // Создает список с тремя элементами. Индексы начинаются с нуля
	
	$arr3 = array("Иванов"=>"Иван", "Петров"=>"Петр", "Сидоров"=>"Сидор"); // Создает ассоциативный массив с тремя элементами
	
	$arr4 = array("name"=>"Иванов", "age"=>"24", "email"=>"ivanov@mail.ru"); // Создает многомерный ассоциативный массив
	$arr4 = array("name"=>"Петров", "age"=>"34", "email"=>"petrov@mail.ru");
	$arr4 = array("name"=>"Сидоров", "age"=>"47", "email"=>"sidorov@mail.ru");
	?>
	
Удалить отдельный элемент массива можно при помощи функции unset(), а проверить существование массива можно при помощи функции isset(). 

Пример:

	Определим массив из 10 элементов и уничтожим каждый чётный элемент.

	<?php
	$arr = array(9, 8, 7, 6, 5, 4, 3, 2, 1, 0);
	unset($arr[0], $arr[2], $arr[4], $arr[6], $arr[8]);
	
	// Проверяем существуют ли элементы массива
	for($i = 0; $i < 10; $i++)
	{
		if(isset($arr[$i])) echo "Элемент $arr[$i] определён <br />";
		else echo "Элемент $arr[$i] не определён <br />";
	}
	?>

	Результатом работы скрипта из будут следующие строки
	
	Элемент $arr[0] не определён
	Элемент $arr[1] определён
	Элемент $arr[2] не определён
	Элемент $arr[3] определён
	Элемент $arr[4] не определён
	Элемент $arr[5] определён
	Элемент $arr[6] не определён
	Элемент $arr[7] определён
	Элемент $arr[8] не определён
	Элемент $arr[9] определён

	При помощи функции unset() можно уничтожить весть массив сразу.

	<?php
	$arr = array(9, 8, 7, 6, 5, 4, 3, 2, 1, 0);
	unset($arr);
	if(isset($arr)) echo "Массив определён";
	else echo "Массив не определён";
	?> 
	
Объединение массивов.

Пример:

Создадим два ассоциативных массива $a и $b:

	<?php
	 $a = array(“a” => ”aa”, “b” => “bb”);
	 $b = array(“c” => ”cc”, “d” => “dd”);
	?>

Пусть необходимо создать массив $c, которые будет содержать как элементы массива $a так и массива $b:

	<?php
	 $a = array("a"=>"aa", "x"=>"xx");
	 $b = array("c"=>"cc", "d"=>"dd");
            $c = $a + $b;
	 echo "<pre>";
	 print_r($c);
	 echo "</pre>";
	?>

Результат:

	Array
	(
	    [a] => aa
	    [x] => xx
	    [c] => cc
	    [d] => dd
	) 

Внутренний указатель массива.

Next	Передвинуть внутренний указатель массива на одну позицию вперёд 
Сurrent	Возвратить текущий элемент массива
Prev	Передвинуть внутренний указатель массива на одну позицию назад
End	Установить внутренний указатель массива на его последний элемент 
Reset	Установить внутренний указатель массива на его первый элемент 
Key	Выбрать ключ из ассоциативного массива

Пример:

	<?php
	$transport = array(
				'foot',
				'bike',
				'car', 
				'plane'
				);
	
	echo current($transport); // foot
	echo next($transport);    // bike
	echo current($transport); // bike
	echo prev($transport);    // foot
	echo end($transport);     // plane
	echo current($transport); // plane
	echo reset($transport); // foot
	echo key($transport); // 0
	echo end($transport);     // plane
	echo key($transport); //3
	?> 
